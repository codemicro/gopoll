// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package webRes generated by go-bindata.// sources:
// build/main.css
package webRes

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x7a\x6d\x73\xdc\x38\x72\xff\x6b\xf3\x53\xf4\x69\x6b\x6b\x64\x15\x39\x4f\xd2\x48\xd6\xf8\xbf\xff\xc4\xeb\xec\x26\xae\x5a\x6f\x52\x96\x5d\x57\xa9\xab\x54\x04\x12\x3d\x43\xac\x40\x80\x01\xc0\x19\x8d\x7d\xfe\xee\xa9\x06\x08\x0e\x39\x33\xd2\x3e\xdc\x25\xaf\xb2\x2f\xd6\x43\x12\xe8\x6e\xf4\xe3\xaf\x1b\x9a\x5c\xfc\x09\x1c\x13\x72\x2b\x14\x2f\xac\x85\xcd\x7c\x3c\x1d\x5f\xc1\x5f\xe1\xfd\xbb\x8f\xf0\x93\x28\x50\x59\x84\xbf\x42\xe9\x5c\x6d\x97\x93\x49\x6f\xe9\xb8\xd0\x15\x5c\x4c\x92\x84\x48\x54\x9a\xa3\x51\x99\xd2\xa6\x62\x52\x7c\x46\xd8\xcc\xc6\xd3\xf1\xf4\x49\x3a\x6b\xe1\xca\x26\x27\x12\x13\x2b\x14\x37\x68\xb5\x29\x1b\x3b\x39\xa2\x13\x18\x24\xff\xa4\x8b\xa6\x42\xe5\x92\xef\xda\xff\x92\xf0\xe1\x22\xf9\x64\x11\x18\xe4\xe8\x1c\x1a\xc8\xf5\xa3\x17\x45\xc2\xb9\xae\x85\x12\x5a\x31\x87\xfc\xe5\xd8\xaf\xbe\x48\x93\x8b\xe5\x32\xc7\x95\x36\xe8\x7f\xb2\x15\xed\xf9\x92\x00\xed\xcb\xac\xf8\x2c\xd4\x7a\x09\xb9\x36\x1c\x4d\x96\xeb\xc7\xd7\xc9\xd7\x3e\x8f\x4a\x1b\x04\x83\x8c\xb3\x5c\x22\x38\x96\x83\x25\x09\x4f\x70\x5a\x1a\xad\x9d\x27\x9c\x55\xfa\x73\xe6\x58\x4e\xd4\x71\x09\x57\xaf\xe9\x9d\x3e\x7c\x03\x00\x83\x37\x2d\xdb\xd9\x18\xde\x6a\x63\xb0\x70\xe0\x4a\x04\x29\x14\x42\x89\x62\x5d\x3a\x10\x0a\x98\x94\x90\x1b\xbd\xb5\x68\xec\x38\x99\x8f\xe1\xdf\x0c\x6e\x50\x39\x60\xfc\x97\xc6\x3a\xd2\x96\x05\xbd\x82\x95\x56\x2e\x48\x1a\xce\xab\x8d\x40\xe5\x98\x13\x5a\x41\x51\x32\xb5\x46\x4b\xe4\xc4\xbf\xde\x05\xe1\x4b\x57\x49\x2f\x3b\xf1\xcb\x02\xbf\x25\xcc\xc6\xb3\xc5\x6b\x98\x5c\xc0\x8c\x4c\x02\x90\x6d\x31\x7f\x10\x2e\x73\xf8\xe8\xbc\xe0\x59\x60\xbb\x84\xd9\x74\xfa\xad\x5f\x39\xa7\x95\xfe\x28\xc9\x1d\x16\xc4\xcf\x1e\x9b\xef\x03\x56\x7a\x83\xfe\x7c\x15\x33\x6b\x12\xe4\xf0\x68\xb4\x34\xd7\x7c\xe7\x85\x0a\x8b\x96\x30\xed\xb4\xf4\xae\xaa\x0d\x91\x28\xb4\xb2\xc2\x3a\x54\xc5\x8e\x8e\xcd\x71\xc5\x1a\xe9\xfc\xf1\xed\x11\x51\x38\xff\xbd\x9e\x38\x11\xd6\x36\x68\x27\x97\x2f\x87\x02\x11\xfd\x6c\xc5\x2a\x21\x77\xcb\xe4\xc5\x0b\xbb\xb3\x0e\xab\xac\x11\x69\xf2\xe2\x45\xc6\xea\x5a\x62\x16\xde\xa5\xa4\x93\x1f\x85\xc1\x95\x7e\x04\xdb\xd4\xb5\x36\xce\x82\x2b\x85\x85\xbc\x71\xa0\xb4\x83\x1d\x3a\xb8\xef\x28\xdc\x93\xfe\x5e\xbc\x18\xdd\xe1\x5a\x23\x7c\x7a\x37\x22\x92\x1f\x74\xae\x9d\xa6\x5f\xff\x82\x72\x83\x4e\x14\x8c\x1e\xde\x18\xc1\x24\xfd\xb0\x4c\xd9\xcc\xa2\x11\x2b\x7a\x1a\xbd\x21\x01\xe0\xad\x96\xda\xc0\x0f\x95\xfe\x45\x78\x22\x1d\xc9\xf6\x5d\xab\xcb\xe4\x9f\x8d\x6e\x6a\xa1\xd6\xa4\x4b\xd7\x8f\xb6\x23\xb3\xcd\xc6\xf0\x86\x73\x6f\xb6\xa2\x75\xd1\xbd\x67\xb6\x87\xf4\x4e\xd9\x77\x60\xa1\x4a\x34\xc2\x31\x55\x20\x59\x28\x04\x1a\x14\x5e\xb8\xde\xb6\xbd\x6d\xf2\x66\xfd\x59\x48\xc9\xc6\x95\x0e\xff\x6a\xb3\x9e\xd8\x52\x6f\xff\x33\x6f\xd6\xe3\x62\x2d\xfe\x41\xf0\xef\x66\xb7\xd3\xeb\xc5\x22\x58\xa5\x0c\xe1\x1c\x9d\x76\xda\xf7\x58\xcf\x67\x19\x85\x38\xf4\xd0\x8f\xe4\xc7\x12\x37\x28\xc1\x62\xc5\x94\x13\x85\x3d\x3a\xfe\x40\x05\x87\xe7\xa7\x48\x00\x8e\x85\x36\x21\xb6\x84\x82\xb7\xa5\xd1\x15\xa6\xf0\x03\x5f\x63\x0a\x4c\x71\xb8\x63\x2b\x66\x44\xf0\x69\x96\xe7\xe6\x2f\x4e\x38\x89\xff\x11\x72\x45\x3f\xa4\xf6\x84\x96\xd0\x28\x8e\xc6\x47\x3f\xd7\xce\x21\x6f\x53\x46\xc8\x1b\xbf\xbe\xf8\xeb\x69\x79\x7d\x5e\xd8\x76\x46\x23\x19\x8f\x44\xcc\xd3\xc4\x3a\xa3\xd5\x7a\xef\xea\xdb\x56\xb7\xb9\x96\x1c\x4d\x3f\x57\xfd\xef\x07\xe2\x81\x7f\x69\xce\x61\x84\xd5\xa8\x4b\x79\xe4\xca\x27\xd3\x49\xa1\x39\xa6\xc9\x43\xce\xd3\xc4\xb2\xaa\x4e\x93\xda\xe0\xa9\x68\x6e\x44\x56\x69\xa5\x6d\xcd\x0a\xa4\xc0\xb9\xfb\xf1\xbd\x56\x3a\xfb\x80\xeb\x46\x32\x43\x6f\xde\x6a\x65\xb5\x64\xd6\x87\xd5\x4f\x22\xc7\xd6\xfa\xb4\xce\xc7\xda\x7b\x54\xd2\xc7\x6b\x47\xa8\xef\x94\x9e\x5f\xc8\xfb\x33\xac\x0e\x9c\xf2\x09\x9b\xf9\x5c\x7e\xf2\x58\xb6\xa2\x77\x5f\x86\x74\x5f\x4d\xbf\xed\xac\x14\x4b\xc4\xc8\x36\xf9\xc8\x5b\x7b\x64\x9b\x7a\x04\x28\x31\xd4\x8b\x95\xd1\x15\xb0\xd5\x8a\xf2\xb5\x5a\xff\x7a\xd9\xf1\x5c\x1b\x72\x93\xa6\x3e\x64\x7c\xb3\xf8\xf6\xf5\x61\x19\x99\xd2\x9b\x5a\x5b\x11\x9c\xd5\xa0\x64\x4e\x6c\x90\xde\x6e\xd0\x50\x36\x93\x19\x93\x62\xad\x96\x90\x33\x8b\xb4\xd7\x0b\x6f\x9b\xbc\x2d\xd4\xce\xe9\x6a\x09\xd9\x74\x3c\x5f\x60\xd5\x7e\x0b\xac\x9d\xae\xfd\x87\xf8\x9e\xa2\x9a\xe5\x64\x28\xe0\xcc\xb1\xe4\xa9\x44\x16\x4b\x10\xc5\xaf\x50\xbc\x2b\x8e\x5e\x17\xce\x17\xfb\x36\x1f\xda\x7d\x50\xf7\x43\x65\x90\xb0\xec\xb8\xa0\x05\xa2\xa9\x7c\xb6\xaa\x27\xf1\x31\xfa\x2d\x47\x02\x51\x94\xb9\x6e\x6f\x6f\xa7\xaf\x5e\xa5\x30\xd8\x1d\x92\xc0\xc9\x4c\x37\x9f\xce\xe6\xb7\x37\x43\xb7\xf7\xe2\x1d\x64\xd2\x7d\x96\x6d\xed\xf5\x77\x14\xf9\x72\x71\x33\xbf\xfd\xed\x22\xcf\x6e\x17\xd3\xd9\x75\x48\xce\x41\x56\x6f\x29\x4a\x5a\x41\xd5\x07\x49\xba\x05\x5f\xcf\xe7\xea\x1f\xb5\xa9\xda\xe4\xdc\xb7\xe3\x5b\x0f\x66\xbc\xcf\x86\x38\x71\x3b\x89\xc7\x19\x87\xd4\x77\x12\x75\xc4\xda\x7c\x94\x04\x1b\xe7\xb4\x4a\x13\xa1\xea\xc6\xa5\x89\xae\xdd\x9a\xea\x64\x9a\x58\x94\x58\xb8\x34\xa1\xe3\x30\x83\xec\x28\x83\x0c\x0e\x70\x22\xe2\x23\x52\x6a\x3f\x3d\x0b\xb8\xf6\xc0\xe7\x30\x49\xf4\x0e\x73\x50\x61\xbd\x4b\x3b\xc3\x94\x5d\x69\x53\x0d\xb2\x7c\x57\xa3\x67\x03\x6d\xfc\x2a\x81\x6e\x5f\x5f\x33\x41\x11\xf0\xa5\x27\xae\x37\x71\xb7\x73\x09\x4a\xb7\x91\x4c\x12\x0f\x41\x01\xcb\x85\x14\x6e\x07\x4e\x07\x93\x41\x21\x45\xf1\x10\x40\xf6\xae\xee\xd0\xe9\x93\x76\xf9\x0b\xad\xfa\x6e\x14\x1e\x47\xc3\x5a\xca\xea\x1a\x99\xa1\xe3\x2c\x21\x2c\x78\x7d\x52\x6d\xca\x37\x0f\x3e\x8a\x88\x4d\xcd\x38\x6f\x8b\xc7\xe0\xc0\x61\x9f\x75\xd4\x09\x04\x3f\x2b\x1a\x1b\x1d\xad\x51\x16\x1d\xe4\x3b\xff\xa5\x36\xb8\x11\xba\xb1\x60\x1a\x89\xe3\x53\x70\x97\x58\x50\x9e\x61\x12\x46\x4b\xa1\x36\x4c\x0a\x3e\xea\x39\x6d\xc7\xf8\x0e\x71\x79\xaa\x71\x6a\x41\xd1\x64\x8d\xc5\x83\xce\x38\x6e\x26\xb9\xd4\xf9\x64\xbe\xba\x45\x56\xf0\x5b\x7e\xc9\x6f\x6f\x17\xc5\xed\xe5\x4d\x7e\x35\x5f\xcc\xd8\x62\xb1\xb8\xe1\xb7\x0b\x7e\x75\x7b\x55\xdc\xe6\x38\x9b\x48\xb6\xd3\x8d\x9b\x78\x8e\x13\x83\x76\x42\x96\xb2\xe3\xc2\xda\x6f\x7e\xba\x99\xbf\xca\x7e\xba\xb9\xbc\x39\x25\x78\x54\x8e\xd5\xc0\x09\x30\xe9\x1a\x8d\x05\x66\xd0\x63\xd8\x82\x35\x54\x29\x74\xe3\x60\x5b\xa2\xa2\x1d\x3b\xf8\x8c\x46\xfb\x57\xa3\x95\x40\xc9\x2d\xba\x5e\xcd\x39\x59\x54\x24\xae\x51\x71\x6f\xcb\x96\x5f\x1f\xf3\x1f\xd6\xc5\x58\x3b\xc0\xd7\x0e\x22\x7b\x90\xa9\x07\x56\xac\x8d\x5e\x1b\xb4\xd6\x53\x7f\xb6\xec\x1c\x3a\x6b\xd1\x18\xab\x4d\xeb\xa6\x7a\x05\x42\x15\xc6\x9f\xc2\x33\xe1\x18\x9f\x82\xab\xf9\xa3\xf5\x3d\xf6\x44\x53\x47\x98\x65\xef\xa4\xa7\xeb\xcb\x11\xce\x69\x9c\x2f\xca\x41\x8c\x13\x3c\x8e\x5c\xbb\xe7\xcf\x47\xe4\x41\x2b\xa8\x58\x11\xdb\xbf\x13\x32\xfe\xb1\x10\x9d\x77\x19\xd9\x67\xe3\xda\x90\x9f\x38\x81\x96\xa8\x8c\xda\x44\x33\x3a\x16\x3f\x79\xa7\x1c\x1a\x56\x10\x2e\x48\x8e\x4b\xf6\x91\xed\xb9\xb0\xb5\x64\xbb\x27\x54\x17\x00\x4a\x55\x31\x13\xda\xb5\x76\xf5\x12\xa4\xb0\x2e\x13\xae\xc3\x0a\x17\x09\x5c\xc0\x7b\xa6\x1a\x26\xe5\x0e\x56\xda\x3c\x20\x0f\x10\xe0\xee\xd3\xbb\x8f\xf0\xf6\xee\x0e\xbe\x67\xf6\x74\x24\xda\x46\xb8\xc2\xda\x09\xf9\x0e\x91\x79\x43\x6d\x9d\x02\xc9\x76\xd4\x6f\x2b\x42\x26\xe4\x2d\x1d\x84\xa5\x18\x03\x57\x32\xaf\x95\x8d\xe0\x68\x81\x81\x75\xcc\x78\xd0\x55\x6b\xa1\x9c\x9f\x36\x10\x2d\xa2\xed\x15\xbd\xd2\x06\xb6\x98\x93\xb7\x48\x51\x78\x88\x62\xc7\x09\x44\x9b\xc1\x45\x9b\xc7\xad\xd7\x4e\x44\xdd\x84\x38\x89\x28\xe9\xa4\x4d\x70\x44\x88\xd5\x64\x0f\x23\x98\xc3\x2e\x10\x5b\x62\xb9\xd4\xc5\xc3\x7f\x35\xda\x61\x9a\x70\x99\x26\x9c\xa7\x49\x39\x4b\x93\x72\x9e\x26\xe5\x65\x9a\x94\x57\x69\x52\x2e\xd2\xa4\xbc\x4e\x93\xd2\xa4\xc9\x4a\xac\x1b\x83\x69\xd2\x43\xd1\xc3\x26\x3d\x04\x43\x80\x6f\xac\x78\xa0\xe2\xa9\x78\x2c\xf1\xbe\x44\xd4\xcc\xa0\x72\xaf\x87\x0b\x44\xc5\xd6\x78\x50\x38\xe0\x02\xfe\xac\xcd\x03\x30\xbf\x04\x58\x8c\xeb\xc9\xbb\x1f\x20\x6f\xd6\x94\x71\xda\xcc\xdc\xa3\x0b\xf7\x41\x82\xfb\x1e\x75\xa2\x64\xd0\x36\xb2\xcd\x3f\x20\xb5\xf5\xd3\x92\xbe\xee\xba\x7d\xfd\x34\x1f\xb5\xe4\x3f\x2d\xc3\x17\x3a\x5a\x1b\x94\x4b\x98\xd5\x8f\xbd\x3e\xad\x7b\xbd\xa8\x1f\x81\x35\x4e\x77\xa5\xc9\x6f\xcd\x8c\x50\xeb\xa0\x0b\x7f\xc8\x98\x1e\x0f\xd5\x78\x94\x05\xb5\x4c\x93\x26\xce\x69\xac\xcb\xbc\x70\x51\x5b\xcf\x6f\x6d\x15\xf9\xb1\x1d\xe5\x41\xd1\x58\xa7\x2b\x52\x07\x46\xd0\x34\x70\xab\xd9\x18\x3e\xd9\xa0\xd5\xc6\xa2\x19\x59\x82\xc3\xc1\xea\x1c\xee\x2d\x53\xf6\xbe\x8f\x7a\xe0\x7c\x2b\x5c\xd9\x91\x1f\xd9\xa8\x4f\xa2\x05\x00\xfb\x09\x45\x84\x69\xac\x78\x00\x46\x21\xb0\x62\x52\x92\x8d\x5e\x86\x47\xcb\x54\x67\x0c\x52\x3b\xcc\x83\x24\xc7\xa4\xe1\x2c\xc4\xd6\x59\x1f\x43\x51\x81\x8a\x42\x83\xb0\x6a\x44\xfd\x93\x29\x90\xb7\x82\x38\x0d\x7a\x83\xc6\x08\x8e\x20\x1c\x3d\xa2\xb2\x8d\x19\x36\xb0\xd4\x2f\x85\x42\xd6\xd8\xd8\x11\x45\xa6\xae\xc4\x0a\x5b\x7f\xe8\xa6\x66\x03\xfc\xd7\x88\xac\x37\x90\x81\xfd\x70\x08\x0e\x46\x43\xdf\x4b\xa1\x1e\xde\xb3\xe2\xce\x3f\xff\xa8\x95\x4b\xe1\x2c\x4e\x69\xce\x52\x68\xc7\x3e\x70\xd6\x4d\x7d\xe0\x67\x6c\xf0\x2c\x85\x30\xf9\x81\xb3\x9f\xb5\xd3\x70\xc7\x94\x3d\x4b\xa1\xcf\xf3\xec\x68\x04\x74\xd6\x23\x7d\xe2\xcd\xdd\xae\xca\xb5\x3c\x8b\x24\xfb\x1b\x9f\x01\xab\x8b\x23\x58\x0a\x17\xf0\x2e\x24\xf9\x81\x77\x50\x22\xea\x1b\xc9\xa7\xd8\x7b\x52\xdf\x3d\x19\x8c\x8c\x65\xa1\x60\x0a\xc8\x1b\x49\xc3\xc0\xc8\x1d\x81\x41\x21\x99\xb5\xc0\x05\x65\x7d\xb9\xf3\x79\xb5\xc4\xb8\xb5\x4d\x62\x31\x3a\x4f\x4d\xe7\x3a\x34\x7e\x28\x7d\xf7\xfe\x6b\xdf\xe7\x63\xaf\x1c\x6b\x67\x3f\x83\x0e\xbb\xe4\x96\x37\x6c\x05\x77\x25\x49\xd0\x3a\xd8\x9f\xbd\xef\x71\x5f\x35\xfd\x61\x84\x4f\x36\x24\xb5\x77\x97\xb8\x8f\x28\x8b\xa8\x2a\xa3\xab\xe8\x9f\x1e\x6b\xf9\x0c\x16\x57\x52\xea\xc6\x0d\x9a\x1d\xd5\x17\x62\x6c\x71\x0c\x1f\x89\x6e\xc1\x3c\xab\xd0\xb0\xb5\x04\x84\x02\x5b\x32\xae\xb7\x19\xd7\x55\x86\xaa\x24\x88\xc1\xf7\xc0\x4b\x8a\x07\x84\xff\x17\x9a\x3b\xfb\xff\x7b\xc9\x33\x8e\xff\x5a\x32\x16\xb6\x86\x30\x0a\x27\x70\xcb\x80\x8b\x0d\xf8\x10\xdf\x4f\xcd\xc3\xf9\x34\xdc\xb7\x3b\xb3\x5c\x3f\xde\xf7\x34\x71\x1a\xbd\x72\xdc\xd8\x49\x61\x2d\x81\x26\xbe\x8b\xcd\xe6\x55\xd8\xd6\xc6\xfb\x1b\x29\xf5\x16\xa2\x09\xa2\x01\x9c\x06\xa6\x3a\xad\xe4\x3b\xf8\xa5\xb1\xee\x70\x55\x76\x68\x8f\xef\x77\x31\x74\x53\x7f\xcc\x2d\x0b\x58\xbd\x45\x9e\x60\x6b\x2c\xc4\xca\x23\x14\xaa\xcd\x3d\x0e\xb6\xd4\x8d\xe4\x50\xb2\x0d\x81\xdc\x96\x5c\x2b\x8b\xb0\x24\x80\x45\xe7\x7d\x41\xb8\x91\x8d\xfc\x03\x54\x22\xb5\x50\x5a\xbe\x8f\xb6\x27\x17\xcf\xd8\x7a\xaf\xe0\x90\x73\x4b\x44\xd7\x13\xf6\x9d\x82\xee\xac\xc8\xac\x0f\x1d\x1e\x3d\xd0\x63\xa8\xce\x8e\xf1\xfc\x51\x06\x1f\x16\x7d\x1d\xdc\xb7\x34\x5b\x0c\xb6\x4b\x61\x8b\xed\xec\x7f\x90\xd0\x06\x72\x7b\x98\x20\xe5\x9e\x0d\x1d\xc4\x6a\x29\xf8\xbd\x9f\x65\xb6\x34\x1b\x8b\x03\x7d\xd3\xb2\x92\x52\xaa\x8f\x5d\xa1\xac\x43\xc6\x5b\x27\x25\x85\xeb\xc6\x44\xe1\xee\xa1\x71\x84\x2b\x49\xe3\x5a\xc9\x5d\x4b\x51\x61\x3f\x66\x0e\x8f\xd2\x1d\x22\xd2\x8e\x55\x1b\x95\x13\xa6\x5b\x1d\x8f\x6c\x4b\x6d\x5c\xc9\x14\x4f\xa1\x62\x0f\xa4\x1d\x12\xa0\x35\xdd\x9e\x7d\xd5\x14\x65\xb8\xe0\xb1\xce\x30\x4a\x0b\x2b\x6d\xb6\xcc\x78\x41\x0a\x5d\xd5\xda\xe2\xf3\xfe\xdc\xbb\x19\x1b\xfc\xae\x1b\x29\x27\xb3\xd9\x75\x48\x4c\x17\x69\xb2\xbf\x82\xfa\x0d\x37\x50\xc7\xa3\x11\xaf\x85\xc1\x18\x00\x06\x76\x5b\x82\xb7\xd1\x89\xcf\x2d\xe2\xfa\x06\x17\x78\x83\xf9\xe1\x50\x05\x2e\xe0\x87\x50\xfe\x4a\x6d\xc4\x67\xad\x1c\x93\xbe\x79\x0d\xad\xdd\x46\x58\xe1\x47\x4d\xbb\x5e\x39\xdf\x4f\xdc\x5b\x16\x4e\xd7\x51\xc0\x59\xfd\xd8\x4f\xa8\x9f\x14\xd7\x03\x6b\xf6\x00\xcb\x7d\x8b\x3d\x7c\xd4\xfd\xdc\x5d\xfd\x79\xa0\x1b\xda\x05\x8f\x05\x6d\x28\xe8\xcc\x87\x4d\xcf\x8d\xb2\x2f\x9e\xe5\xd7\xbe\x3b\xf9\x48\xf5\x5e\xf1\x58\x63\xe1\x28\xeb\xf9\x74\x1d\x6d\xf8\xb1\xc4\x1e\xa7\xc0\x5e\x50\x0b\xaf\xb0\x40\x6b\xa9\x5b\x20\xff\x27\xd4\x27\xa8\x2f\xdb\x0e\xaa\xfe\xc0\x16\x44\xce\x69\x98\x52\x41\xea\xc7\x4b\x64\xf5\x3b\x7c\x25\x4e\xb6\xaf\xe7\x41\xb9\xa2\x5a\xf7\xb5\x3b\xb0\x2f\xe9\x76\x30\x78\x32\x18\xa6\x4a\xb1\xa1\xf5\x2b\xfc\xcc\x6a\xb9\xf4\xd7\x90\xb5\x64\x05\x96\x7e\x6c\x9f\x42\xdc\x7a\xfc\x2d\xa0\x59\x6a\x1b\xdc\x6e\x09\xb3\xd7\xfb\xab\x93\x6f\x6e\x0b\x76\xc9\x56\x3d\xc2\x59\x65\x33\xff\xeb\x09\xe2\x27\xbf\xff\x1e\x06\xcb\x3e\xdd\x64\x2f\xf4\xef\x26\xd7\x6b\x42\x42\x13\xbf\x0c\x7d\x56\x7b\x85\xb1\x9f\x4d\xee\x83\x45\xb2\x9a\xfa\xbd\xf8\xcb\xaf\x3b\xdd\x08\x1d\x4e\xbe\x7b\x40\x63\x70\x67\x72\x02\x68\x7c\xf0\xae\x47\xe8\xcf\x3b\xba\xae\x9d\xa8\xc8\x25\xc9\xfb\x74\xed\x32\xaa\xe1\x6e\x27\x43\xf3\x1e\xf3\x9d\x0f\x80\xda\x65\xba\x89\x80\x27\xb8\xc0\xc1\xd8\x34\x39\x71\x3d\xf4\xa4\x08\x7e\xc0\x17\xeb\x5d\xbf\x59\xf7\xa5\xd0\x20\x15\x21\x3f\x00\x58\x69\xb3\xf6\xd5\xde\x77\xa7\xbe\x54\xe0\x23\xb5\xa4\x82\x50\x99\xd5\xb0\xd3\x0d\x70\x4d\x70\x5b\x28\xc6\xc9\x1d\x51\xd1\x27\xa1\x9c\xd1\xbc\x29\xb0\xdb\xd8\x52\xe7\xb8\xf1\x8d\xa8\x87\x55\x3b\x8a\x6c\x8e\x56\xac\x55\x8b\x97\xa9\x78\xa0\xc5\x7d\x6b\xe2\x6f\x4f\x23\x76\x22\x88\xe4\x04\xe5\xaa\x7d\x0e\x11\x16\x98\x34\xc8\xf8\xae\x4d\x22\x84\x5c\x68\xe3\xa0\x03\x1f\x74\x72\xbf\x75\xbc\xdb\xef\xa5\x9e\x82\x91\xc7\x86\xe8\xe5\x41\xdb\x41\xac\xd8\x42\x8d\x2a\xad\x74\x7b\x69\xd5\x82\x64\x8f\xf3\xba\xba\xdb\xa6\x3c\x6f\x84\x98\xce\x9c\x86\x9c\x12\x97\xe2\x48\x34\x3c\x1e\x63\xd0\xdd\x31\x79\x6a\xa9\x6f\xa8\x84\x5a\xd3\x6e\xea\xab\x68\x17\x31\x0f\x7a\xed\xad\x0e\x3d\x98\xf0\x85\xd4\x20\xe9\x4f\xe9\x9e\x88\xb4\xff\x58\xca\x56\x7f\x35\x95\xb2\x83\x0b\xb5\x93\x9d\xd0\xfe\x26\x0d\x0e\xee\xd1\x20\x5c\x92\xc1\x7b\xad\x58\xa1\x53\xe8\x2e\xd5\xe0\xec\xe0\x4a\x8d\xda\x92\xb7\xba\x31\x02\x0d\xfc\x8c\xdb\xb3\x74\x7f\x88\xe1\x1c\xe7\x81\x94\xe3\xb3\x44\x0f\xf0\xde\x77\xd3\x1f\x3f\xe4\xb8\xef\x55\x33\xea\x38\x49\xd1\x23\xef\x60\x3e\xc7\x63\xc9\x36\x42\x1b\xef\xcf\x5b\x46\xbe\x26\x2b\x4d\x30\x53\xca\x88\x39\x9c\xa8\x70\x0c\xef\x94\xad\x85\xe9\x9c\xec\xed\xdd\x1d\x7c\xf0\x90\x36\x0d\x76\xb9\xb7\x9b\xf5\x3d\xa1\x37\xe4\xc4\x66\x8b\x52\x3e\x53\x1c\x9e\x04\xc6\xb3\xab\xae\x2a\xa4\x89\xdd\xac\xd3\x64\x23\x38\xea\x34\x29\x98\xda\x30\x9b\x26\xac\xe1\x42\xa7\x89\x58\x19\x56\x61\x9a\x60\x95\x23\x4f\x13\x9d\xff\xe2\x87\xf3\xfd\xe1\x97\x3f\xfe\xa9\x4b\xb7\x4a\x70\x2e\x07\xaa\x24\x5b\x10\x24\x52\xb1\x08\x53\xb7\xe2\x19\xdb\xe8\x4e\x6d\x93\x12\xe0\x9f\x1f\x9f\x53\x2c\x9a\x0d\xb6\xaa\x14\xc6\xe7\x2e\x23\x94\x15\x05\x30\x82\xd9\x0e\xbc\x51\xff\x66\x35\x78\x41\xda\x61\xc9\x63\x07\x3d\xa6\x53\x7f\xf3\x18\x03\x93\x35\x4e\xfb\x23\x8d\xf7\x69\xbe\x53\x85\x7f\xe5\xbf\x5e\x84\x9b\x83\xcc\x6d\xb3\xd0\x36\x2d\x61\x0a\x53\xf8\x66\x3a\x9d\x4e\x0f\x17\xf8\xb1\x8d\x50\x16\xdd\x12\x36\xcc\x9c\xfb\x97\x58\xd5\x6e\x97\x4e\x2e\xfe\x74\x31\x01\xff\xff\x97\xaf\x07\xeb\xf5\x6a\x65\xd1\x75\x08\x8e\x00\xd2\x89\xcf\xb1\x78\xad\x56\xab\xe1\xf7\xf6\x83\x59\xe7\xec\x7c\x71\x9b\xc2\xec\x72\x9a\xc2\xfc\xea\x3a\x85\xe9\x78\x71\x9a\xd5\x89\x73\xf4\x57\x9d\x3e\xe6\x3f\xc6\x09\xd5\x03\xee\xbc\x2b\x59\xb0\xb5\x50\xed\x1d\xab\xff\x07\xa0\x77\xb5\x63\xb4\x63\x0e\xcf\x2f\xaf\xa7\x1c\xd7\x5e\x8e\xaf\x9e\xcc\xdf\xb8\xfd\x58\x0a\xff\xa7\x29\xb4\xff\x66\xf1\x6d\xea\xad\x7c\x4c\xcd\x16\x4c\xe2\xf9\xfc\x65\xf8\x1b\x89\x0e\x16\x4c\x4f\x89\xf5\xf7\xa1\x77\x42\xce\x46\xda\xe0\x65\x8b\x8e\x64\xb7\x73\xbc\x38\x29\xca\x6f\xdd\x72\xcc\x2d\xd7\x0d\x21\x54\xda\x33\x7d\xf2\x18\xfe\xa7\x64\x0e\xff\xfd\x3c\x9b\x2f\xbe\x6d\x8f\xd3\xdd\x92\x29\x51\xf9\x1c\x9b\x11\xfa\x50\xeb\x6c\xd5\xa8\x22\xe0\x85\xa2\xc9\x45\x91\xe5\xf8\x59\xa0\x39\x9f\x8e\x5f\xa5\xd3\x74\x96\xce\x5e\xf6\xff\x04\x05\xe0\x8f\xed\xff\x9a\x0c\x8e\x7b\x74\x59\xf8\x87\x24\x4c\xa7\xe9\x74\x3c\xff\xe3\x12\x0e\xf6\x1f\x5a\xe9\xff\x54\xfd\x3f\xac\xea\x0a\xb9\x60\x70\x5e\x09\x15\xb3\xe4\xf5\xd5\xb4\x7e\x7c\x09\x5f\x9e\xf8\x7c\x73\xfd\xea\xb9\xcf\xb3\xe9\xfc\xea\xd9\xef\xf3\x57\xcf\x92\x9f\x2d\x2e\xaf\xe3\xf7\xff\x0e\x00\x00\xff\xff\x7d\xb9\xb6\x5e\x2a\x2b\x00\x00")

func mainCssBytes() ([]byte, error) {
	return bindataRead(
		_mainCss,
		"main.css",
	)
}

func mainCss() (*asset, error) {
	bytes, err := mainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.css", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"main.css": mainCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"main.css": &bintree{mainCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
